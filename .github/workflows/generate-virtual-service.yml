name: Generate Virtual Service

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      TARGET_BRANCH:
        description: 'Target branch to check for PRs'
        required: false
        default: 'development'
        type: string
      VIRTUAL_SERVICE_NAME:
        description: 'Name for the generated VirtualService'
        required: false
        default: 'core-webapp-root'
        type: string
      NAMESPACE:
        description: 'Kubernetes namespace'
        required: false
        default: 'preview'
        type: string
      CORE_HEADER_NAME:
        description: 'Name for the core header (default: x-gocloud-vo-core)'
        required: false
        default: 'x-gocloud-vo-core'
        type: string

jobs:
  generate-virtual-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch PRs with preview-stg label
        id: fetch-prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCH: ${{ inputs.TARGET_BRANCH || 'development' }}
        run: |
          echo "üîç Searching for open PRs to branch: $TARGET_BRANCH with label 'preview-stg'"
          
          # Obtener PRs abiertos hacia TARGET_BRANCH
          PRS_JSON=$(gh api -X GET \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/pulls?state=open&base=$TARGET_BRANCH")
          
          echo "üìã Found PRs:"
          echo "$PRS_JSON" | jq -r '.[] | "PR #\(.number): \(.head.ref) - Labels: \(.labels | map(.name) | join(", "))"'
          
          # Filtrar PRs que tengan el label 'preview-stg'
          FILTERED_PRS=$(echo "$PRS_JSON" | jq -r --arg target_branch "$TARGET_BRANCH" '
            [.[] | 
              select(.labels | map(.name) | contains(["preview-stg"])) |
              {
                number: .number,
                branch: .head.ref,
                title: .title
              }
            ]')
          
          echo "‚úÖ PRs with 'preview-stg' label:"
          echo "$FILTERED_PRS" | jq -r '.[] | "PR #\(.number): \(.branch) - \(.title)"'
          
          # Contar PRs
          PR_COUNT=$(echo "$FILTERED_PRS" | jq 'length')
          echo "üìä Total PRs found: $PR_COUNT"
          
          # Guardar en outputs (escapar el JSON)
          echo "prs_json<<EOF" >> $GITHUB_OUTPUT
          echo "$FILTERED_PRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT

      - name: Generate Virtual Service
        id: generate-vs
        env:
          VIRTUAL_SERVICE_NAME: ${{ inputs.VIRTUAL_SERVICE_NAME || 'core-webapp-root' }}
          NAMESPACE: ${{ inputs.NAMESPACE || 'preview' }}
          CORE_HEADER_NAME: ${{ inputs.CORE_HEADER_NAME || 'x-gocloud-vo-core' }}
        run: |
          PRS_JSON='${{ steps.fetch-prs.outputs.prs_json }}'
          PR_COUNT='${{ steps.fetch-prs.outputs.pr_count }}'
          
          echo "üöÄ Generating Virtual Service with $PR_COUNT PRs"
          echo "üìù VirtualService name: $VIRTUAL_SERVICE_NAME"
          echo "üìù Namespace: $NAMESPACE"
          echo "üìù Core header name: $CORE_HEADER_NAME"
          
          # Crear archivo temporal para el VirtualService generado
          GENERATED_FILE="generated-virtual-service.yml"
          
          # Copiar el template
          cp .github/virtual-service-template.yml "$GENERATED_FILE"
          
          # Aplicar variables din√°micas usando yq
          yq eval ".metadata.name = \"$VIRTUAL_SERVICE_NAME\"" -i "$GENERATED_FILE"
          yq eval ".metadata.namespace = \"$NAMESPACE\"" -i "$GENERATED_FILE"
          yq eval ".metadata.annotations.\"meta.helm.sh/release-namespace\" = \"$NAMESPACE\"" -i "$GENERATED_FILE"
          yq eval ".spec.http[0].delegate.namespace = \"$NAMESPACE\"" -i "$GENERATED_FILE"
          
          # Generar matches din√°micos
          if [ "$PR_COUNT" -gt 0 ]; then
            echo "üìù Generating dynamic matches..."
            
            # Crear archivo temporal para los matches
            # MATCHES_FILE=$(mktemp)
            
            # Procesar cada PR
            echo "$PRS_JSON" | jq -r '.[] | "\(.number)|\(.branch)"' | while IFS='|' read -r pr_number branch_name; do
              echo "  üîß Processing PR #$pr_number with branch: $branch_name"
              
              # Agregar match para el header core
              MATCHES_PARTICULAR=$(printf "  - match:\n    - headers:\n        %s:\n          exact: %s\n    delegate:\n      name: pr%s-nginx\n      namespace: %s" "$CORE_HEADER_NAME" "$branch_name" "$pr_number" "$NAMESPACE")
              
              # Agregar match para x-gocloud-vo-all
              MATCHES_GLOBAL=$(printf "  - match:\n    - headers:\n        x-gocloud-vo-all:\n          exact: %s\n    delegate:\n      name: pr%s-nginx\n      namespace: %s" "$branch_name" "$pr_number" "$NAMESPACE")
            done
            
            # Agregar los matches al archivo usando las variables
            echo "$MATCHES_PARTICULAR" >> "$MATCHES_FILE"
            echo "$MATCHES_GLOBAL" >> "$MATCHES_FILE"
            
            # Insertar los matches usando yq
            # Leer los matches del archivo temporal
            MATCHES_CONTENT=$(cat "$MATCHES_FILE")
            
            # Convertir a JSON para yq
            MATCHES_JSON=$(echo "$MATCHES_CONTENT" | yq eval -o=json)
            
            # Insertar los matches antes del delegate stable-nginx
            yq eval ".spec.http = $MATCHES_JSON + .spec.http" -i "$GENERATED_FILE"
            
            # Limpiar archivos temporales
            rm -f "$MATCHES_FILE"
          else
            echo "‚ÑπÔ∏è  No PRs found, using template as-is"
          fi
          
          echo "‚úÖ Virtual Service generated successfully!"
          echo "üìÑ Generated file: $GENERATED_FILE"
          
          # Guardar ruta del archivo en output
          echo "generated_file=$GENERATED_FILE" >> $GITHUB_OUTPUT

      - name: Display Generated Virtual Service
        run: |
          GENERATED_FILE='${{ steps.generate-vs.outputs.generated_file }}'
          
          echo "üéØ ==============================================="
          echo "üéØ GENERATED VIRTUAL SERVICE"
          echo "üéØ ==============================================="
          echo ""
          
          # Mostrar el archivo generado
          cat "$GENERATED_FILE"
          
          echo ""
          echo "üéØ ==============================================="
          echo "üéØ END OF GENERATED VIRTUAL SERVICE"
          echo "üéØ ==============================================="

      - name: Upload Generated Virtual Service
        uses: actions/upload-artifact@v4
        with:
          name: generated-virtual-service
          path: generated-virtual-service.yml
          retention-days: 7

      - name: Summary
        run: |
          PR_COUNT='${{ steps.fetch-prs.outputs.pr_count }}'
          echo "üìä ==============================================="
          echo "üìä GENERATION SUMMARY"
          echo "üìä ==============================================="
          echo "‚úÖ Target branch: ${{ inputs.TARGET_BRANCH || 'development' }}"
          echo "‚úÖ VirtualService name: ${{ inputs.VIRTUAL_SERVICE_NAME || 'core-webapp-root' }}"
          echo "‚úÖ Namespace: ${{ inputs.NAMESPACE || 'preview' }}"
          echo "‚úÖ Core header name: ${{ inputs.CORE_HEADER_NAME || 'x-gocloud-vo-core' }}"
          echo "‚úÖ PRs found with 'preview-stg' label: $PR_COUNT"
          echo "‚úÖ Virtual Service generated: generated-virtual-service.yml"
          echo "üìä ==============================================="
