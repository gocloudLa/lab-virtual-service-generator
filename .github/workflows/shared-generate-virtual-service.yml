name: Generate Virtual Service Job

on:
  workflow_call:
    inputs:
      TARGET_BRANCH:
        description: 'Target branch to check for PRs'
        required: true
        type: string
      VIRTUAL_SERVICE_NAME:
        description: 'Name for the generated VirtualService'
        required: true
        type: string
      NAMESPACE:
        description: 'Kubernetes namespace'
        required: true
        type: string
      CORE_HEADER_NAME:
        description: 'Name for the core header'
        required: true
        type: string
      HOST_PATTERN:
        description: 'Host pattern for the VirtualService'
        required: true
        type: string

jobs:
  generate-virtual-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch PRs with preview-stg label
        id: fetch-prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCH: ${{ inputs.TARGET_BRANCH }}
        run: |
          echo "üîç Searching for open PRs to branch: $TARGET_BRANCH with label 'preview-stg'"
          
          # Obtener PRs abiertos hacia TARGET_BRANCH
          PRS_JSON=$(gh api -X GET \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/pulls?state=open&base=$TARGET_BRANCH")
          
          echo "üìã Found PRs:"
          echo "$PRS_JSON" | jq -r '.[] | "PR #\(.number): \(.head.ref) - Labels: \(.labels | map(.name) | join(", "))"'
          
          # Filtrar PRs que tengan el label 'preview-stg'
          FILTERED_PRS=$(echo "$PRS_JSON" | jq -r --arg target_branch "$TARGET_BRANCH" '
            [.[] | 
              select(.labels | map(.name) | contains(["preview-stg"])) |
              {
                number: .number,
                branch: .head.ref,
                title: .title
              }
            ]')
          
          echo "‚úÖ PRs with 'preview-stg' label:"
          echo "$FILTERED_PRS" | jq -r '.[] | "PR #\(.number): \(.branch) - \(.title)"'
          
          # Contar PRs
          PR_COUNT=$(echo "$FILTERED_PRS" | jq 'length')
          echo "üìä Total PRs found: $PR_COUNT"
          
          # Guardar en outputs (escapar el JSON)
          echo "prs_json<<EOF" >> $GITHUB_OUTPUT
          echo "$FILTERED_PRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT

      - name: Generate Virtual Service
        id: generate-vs
        run: |
          PRS_JSON='${{ steps.fetch-prs.outputs.prs_json }}'
          PR_COUNT='${{ steps.fetch-prs.outputs.pr_count }}'
          
          echo "üöÄ Generating Virtual Service with $PR_COUNT PRs"
          echo "üìù VirtualService name: ${{ inputs.VIRTUAL_SERVICE_NAME }}"
          echo "üìù Namespace: ${{ inputs.NAMESPACE }}"
          echo "üìù Core header name: ${{ inputs.CORE_HEADER_NAME }}"
          echo "üìù Host pattern: ${{ inputs.HOST_PATTERN }}"
          
          # Crear archivo temporal para el VirtualService generado
          GENERATED_FILE="generated-virtual-service.yml"
          
          # Generar el VirtualService completo desde cero
          echo "kind: VirtualService" > "$GENERATED_FILE"
          echo "apiVersion: networking.istio.io/v1" >> "$GENERATED_FILE"
          echo "metadata:" >> "$GENERATED_FILE"
          echo "  name: ${{ inputs.VIRTUAL_SERVICE_NAME }}" >> "$GENERATED_FILE"
          echo "  namespace: ${{ inputs.NAMESPACE }}" >> "$GENERATED_FILE"
          echo "spec:" >> "$GENERATED_FILE"
          echo "  hosts:" >> "$GENERATED_FILE"
          echo "  - '${{ inputs.HOST_PATTERN }}'" >> "$GENERATED_FILE"
          echo "  gateways:" >> "$GENERATED_FILE"
          echo "  - istio-ingress/public-gateway" >> "$GENERATED_FILE"
          echo "  http:" >> "$GENERATED_FILE"
          
          # Generar matches din√°micos
          if [ "$PR_COUNT" -gt 0 ]; then
            echo "üìù Generating dynamic matches..."
            
            # Procesar cada PR y agregar matches directamente al archivo
            echo "$PRS_JSON" | jq -r '.[] | "\(.number)|\(.branch)"' | while IFS='|' read -r pr_number branch_name; do
              echo "  üîß Processing PR #$pr_number with branch: $branch_name"
              
              # Agregar match para el header core
              echo "  - match:" >> "$GENERATED_FILE"
              echo "    - headers:" >> "$GENERATED_FILE"
              echo "        ${{ inputs.CORE_HEADER_NAME }}:" >> "$GENERATED_FILE"
              echo "          exact: $branch_name" >> "$GENERATED_FILE"
              echo "    delegate:" >> "$GENERATED_FILE"
              echo "      name: pr$pr_number-nginx" >> "$GENERATED_FILE"
              echo "      namespace: ${{ inputs.NAMESPACE }}" >> "$GENERATED_FILE"
              
              # Agregar match para x-gocloud-vo-all
              echo "  - match:" >> "$GENERATED_FILE"
              echo "    - headers:" >> "$GENERATED_FILE"
              echo "        x-gocloud-vo-all:" >> "$GENERATED_FILE"
              echo "          exact: $branch_name" >> "$GENERATED_FILE"
              echo "    delegate:" >> "$GENERATED_FILE"
              echo "      name: pr$pr_number-nginx" >> "$GENERATED_FILE"
              echo "      namespace: ${{ inputs.NAMESPACE }}" >> "$GENERATED_FILE"
            done
          else
            echo "‚ÑπÔ∏è  No PRs found, using template as-is"
          fi
          
          # Agregar el delegate final (stable-nginx)
          echo "  - delegate:" >> "$GENERATED_FILE"
          echo "      name: stable-nginx" >> "$GENERATED_FILE"
          echo "      namespace: ${{ inputs.NAMESPACE }}" >> "$GENERATED_FILE"
          
          echo "‚úÖ Virtual Service generated successfully!"
          echo "üìÑ Generated file: $GENERATED_FILE"
          
          # Guardar ruta del archivo en output
          echo "generated_file=$GENERATED_FILE" >> $GITHUB_OUTPUT

      - name: Display Generated Virtual Service
        run: |
          GENERATED_FILE='${{ steps.generate-vs.outputs.generated_file }}'
          
          echo "üéØ ==============================================="
          echo "üéØ GENERATED VIRTUAL SERVICE"
          echo "üéØ ==============================================="
          echo ""
          
          # Mostrar el archivo generado
          cat "$GENERATED_FILE"
          
          echo ""
          echo "üéØ ==============================================="
          echo "üéØ END OF GENERATED VIRTUAL SERVICE"
          echo "üéØ ==============================================="

      - name: Upload Generated Virtual Service
        uses: actions/upload-artifact@v4
        with:
          name: generated-virtual-service
          path: generated-virtual-service.yml
          retention-days: 7

      - name: Summary
        run: |
          PR_COUNT='${{ steps.fetch-prs.outputs.pr_count }}'
          echo "üìä ==============================================="
          echo "üìä GENERATION SUMMARY"
          echo "üìä ==============================================="
          echo "‚úÖ Target branch: ${{ inputs.TARGET_BRANCH }}"
          echo "‚úÖ VirtualService name: ${{ inputs.VIRTUAL_SERVICE_NAME }}"
          echo "‚úÖ Namespace: ${{ inputs.NAMESPACE }}"
          echo "‚úÖ Core header name: ${{ inputs.CORE_HEADER_NAME }}"
          echo "‚úÖ Host pattern: ${{ inputs.HOST_PATTERN }}"
          echo "‚úÖ PRs found with 'preview-stg' label: $PR_COUNT"
          echo "‚úÖ Virtual Service generated: generated-virtual-service.yml"
          echo "üìä ==============================================="
